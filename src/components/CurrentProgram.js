import React from 'react';
import { ButtonGroup, Button, Panel } from 'react-bootstrap';
import { connect } from 'react-redux';

import { setCurrentProgramName, updateCurrentProgramParam, setCurrentProgram, loadCurrentProgram } from 'actions/actions';
import Timbre from 'components/program/Timbre';
import Control from 'components/program/Control';
import FX from 'components/program/FX';
import VPatches from 'components/program/VPatches';
import Arpeggio from 'components/program/Arpeggio';
import KingKORGMidi, { CURRENT_PROGRAM_DATA_DUMP } from 'midi/KingKORG';
import programParameters from 'data/programParameters';
import { getControlParameterÂ } from 'util/component-helpers';


class CurrentProgram extends React.Component {
  constructor(props) {
    super(props);

    // TODO: use another component to render programs. maybe log all program dumps and store in local storage
    this.state = {
      channel: 0,
      exampleData: [
        [0xf0, 0x42, 0x30, 0x00, 0x01, 0x18, 0x40, 0x00, 0x53, 0x74, 0x61, 0x62, 0x20, 0x4b, 0x69, 0x00, 0x6e, 0x67, 0x20, 0x20, 0x20, 0x00, 0x00, 0x40, 0x00, 0x3c, 0x02, 0x01, 0x04, 0x40, 0x74, 0x01, 0x7d, 0x01, 0x0d, 0x02, 0x00, 0x28, 0x0c, 0x00, 0x09, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x04, 0x00, 0x7f, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x02, 0x4f, 0x00, 0x00, 0x0d, 0x00, 0x10, 0x00, 0x00, 0x07, 0x0f, 0x52, 0x00, 0x07, 0x00, 0x10, 0x18, 0x00, 0x02, 0x0f, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x00, 0x00, 0x03, 0x1d, 0x00, 0x00, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0a, 0x40, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x28, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x7f, 0x7f, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x46, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x02, 0x00, 0x0f, 0x00, 0x00, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x03, 0x1d, 0x00, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x00, 0x05, 0x01, 0x3c, 0x01, 0x00, 0x00, 0x00, 0x40, 0x01, 0x01, 0x3d, 0x33, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x64, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x14, 0x02, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x64, 0x5d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x02, 0x4f, 0x00, 0x08, 0x01, 0x01, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7],
        [0xf0, 0x42, 0x30, 0x00, 0x01, 0x18, 0x40, 0x00, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x00, 0x20, 0x4c, 0x65, 0x61, 0x64, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x0a, 0x40, 0x00, 0x01, 0x7d, 0x00, 0x0f, 0x02, 0x01, 0x09, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x02, 0x00, 0x6b, 0x13, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x7f, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x49, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x02, 0x46, 0x00, 0x00, 0x0d, 0x00, 0x10, 0x00, 0x00, 0x07, 0x0f, 0x61, 0x00, 0x07, 0x00, 0x10, 0x0a, 0x00, 0x05, 0x0f, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x00, 0x00, 0x03, 0x1d, 0x00, 0x00, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0a, 0x40, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x28, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x7f, 0x7f, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x46, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x02, 0x00, 0x0f, 0x00, 0x00, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x03, 0x1d, 0x00, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x03, 0x01, 0x2f, 0x40, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x64, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x14, 0x02, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x64, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x32, 0x00, 0x08, 0x01, 0x01, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7],
        [0xf0, 0x42, 0x30, 0x00, 0x01, 0x18, 0x40, 0x00, 0x44, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x00, 0x4c, 0x65, 0x61, 0x64, 0x20, 0x01, 0x01, 0x40, 0x00, 0x3c, 0x00, 0x00, 0x0a, 0x40, 0x74, 0x00, 0x00, 0x00, 0x0f, 0x0c, 0x01, 0x14, 0x05, 0x04, 0x19, 0x00, 0x7f, 0x25, 0x30, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x7f, 0x0a, 0x00, 0x47, 0x55, 0x00, 0x15, 0x15, 0x1d, 0x00, 0x08, 0x3c, 0x40, 0x00, 0x76, 0x00, 0x0d, 0x61, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x02, 0x46, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0x02, 0x0f, 0x6a, 0x00, 0x07, 0x1b, 0x18, 0x00, 0x00, 0x07, 0x10, 0x08, 0x00, 0x07, 0x28, 0x10, 0x00, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0a, 0x40, 0x74, 0x00, 0x00, 0x0f, 0x0c, 0x00, 0x01, 0x14, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x7f, 0x7f, 0x05, 0x7f, 0x27, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x50, 0x40, 0x00, 0x76, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x46, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x02, 0x00, 0x0f, 0x00, 0x00, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x03, 0x1d, 0x00, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x00, 0x03, 0x01, 0x28, 0x01, 0x00, 0x40, 0x00, 0x40, 0x05, 0x03, 0x0e, 0x24, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x64, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x14, 0x02, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x04, 0x00, 0x64, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x50, 0x00, 0x08, 0x01, 0x01, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7]
      ],
      kbdLog: []
    }
    this.midiLog = [];

    this.midi = new KingKORGMidi(this.onKKChange.bind(this),
      this.onMidi.bind(this),
      this.onKbd.bind(this),
      this.onSysex.bind(this),
      this.onDeviceInquiry.bind(this),
      this.onDeviceSearch.bind(this)
    );
    window.kkmidi = this.midi;
  }

  componentWillMount() {
    this.midi.scanForDevice();
  }

  componentDidMount()    {
    // this.props.dispatch(loadCurrentProgram(this.state.exampleData[0]));
  }

  onKKChange(newState, oldState) {
    // Callback to handle connection change
    if (newState.devicePresent && !oldState.devicePresent) {
      console.log("READY TO SYSEX!")

      // TODO: show button to connect and option to always connect automatically?
      this.midi.connectToKingKorg();
    }

    if (newState.midiOut && !oldState.midiOut) {
      console.log("MIDI OUT AVAILABLE");
    }

    if (newState.midiSound && !oldState.midiSound) {
      console.log("MIDI SOUND AVAILABLE");

      this.midi.deviceInquiry();
    }
  }

  onMidi(evt) {
    console.log("CurrentProgram.onMidi", evt);
  }

  onKbd(evt) {
    console.log("CurrentProgram.onKbd", evt);
    // TODO: listen to program change to load new data from synth

    let kbdLog = [...this.state.kbdLog, evt.data];

    // max 3 in log
    if (kbdLog.length > 3) {
      kbdLog.shift();
    }

    if (kbdLog.length === 3) {
      let [[status1, second1, third1], [status2, second2, third2], [status3, second3, third3]] = kbdLog;
      let channel = this.state.channel;

      if (status3 === (0xC0 + channel) && status2 === (0xB0 + channel) && status1 === (0xB0 + channel)) {

        if (second1 === 0x00 && second2 === 0x20) {
          let pp = second3;
          let bb = third2;
          let mm = third1;

          let programNumber = bb * 100 + pp;

          // TODO: dispatch program number to store

          console.log("PROGRAM CHANGED ON SYNTH", programNumber);
          if (this.programDataDumpDebounce) {
            window.clearTimeout(this.programDataDumpDebounce);
          }
          this.programDataDumpDebounce = window.setTimeout(() => this.midi.currentProgramDataDump(this.state.channel), 100);
        }
      }
    }

    this.setState({ kbdLog });
  }

  onSysex(evt) {
    console.log("CurrentProgram.onSysex", evt, evt.command, CURRENT_PROGRAM_DATA_DUMP, evt.command === CURRENT_PROGRAM_DATA_DUMP);

    // TODO: filter out if not matching midi channel?

    if (evt.command === CURRENT_PROGRAM_DATA_DUMP) {
      console.log("CurrentProgram.onSysex CURRENT_PROGRAM_DATA_DUMP", evt);
      this.props.dispatch(setCurrentProgram(evt.data));
    }
  }

  onDeviceInquiry(channel) {
    console.log("CurrentProgram.onDeviceInquiry", channel);
    this.setState({ channel });

    this.midi.currentProgramDataDump(this.state.channel);
  }

  onDeviceSearch(channel) {
    console.log("CurrentProgram.onDeviceSearch", channel);
    this.setState({ channel });
  }

  getControlProps(id, data, type) {
    return getControlParameter({ parameter: programParameters, data, onChange: this.handleChange.bind(this)}, id, type)
  }

  handleChange(offset, value, midiId, midiSubId) {
    this.props.dispatch(updateCurrentProgramParam(offset, value));

    console.log(this.state.channel, midiId, midiSubId, value);
    this.midi.parameterChange(this.state.channel, midiId, midiSubId, value);
  }

  handleGetCurrentProgram() {
    if (this.midi.state.kingKorgConnected) {
      this.midi.currentProgramDataDump(this.state.channel);
    }
  }

  render() {

    const { dispatch, currentProgram } = this.props;
    const { name, data } = currentProgram;
    const props = {
      parameter: programParameters,
      data,
      onChange: this.handleChange.bind(this)
    }

    let handleProgramChange = (index) => () => dispatch(loadCurrentProgram(this.state.exampleData[index]));

    return (
      <div>
        <div>
          <ButtonGroup bsSize="xsmall">
            <Button onClick={handleProgramChange(0)}>Stab King</Button>
            <Button onClick={handleProgramChange(1)}>Classic Lead</Button>
            <Button onClick={handleProgramChange(2)}>DistModLead</Button>
          </ButtonGroup>

          <Button bsSize="xsmall" onClick={this.handleGetCurrentProgram.bind(this)}>Get Current Program</Button>
        </div>

        <h2>{name}</h2>
        <div style={{color: "red"}}>TODO: Text input control for PROGRAM NAME</div>
        <Control {...getControlParameter(props, "category", "select", "")} />
        <Control {...getControlParameter(props, "voice_mode", "pushbuttons", "")} />
        <Control {...getControlParameter(props, "timbreb_midi_ch", "select", "")} />
        <Control {...getControlParameter(props, "split_key", "select", "")} />

        <FX {...getControlParameter(props, "fx")} />
        <Arpeggio {...getControlParameter(props, "arpeggio")} />
        <Timbre {...getControlParameter(props, "timbre_a")} />
        <VPatches {...getControlParameter(props, "vpatch_a")} />
        <Timbre {...getControlParameter(props, "timbre_b")} />
        <VPatches {...getControlParameter(props, "vpatch_b")} />

        <Control {...getControlParameter(props, "key_response", "pushbuttons", "")} />
      </div>
    );


  }

}


function selectPropsFromStore(state) {
  return {
    currentProgram: state.currentProgram
  }
}

// Wrap the component to inject dispatch and state into it
export default connect(selectPropsFromStore)(CurrentProgram);
