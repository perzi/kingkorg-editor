import React from 'react';
import { connect } from 'react-redux';

import { setCurrentProgramName, updateCurrentProgramParam, loadCurrentProgram } from 'actions/actions';
import KingKORG from 'components/KingKORG';
import Timbre from 'components/program/Timbre';
import programParameters from 'data/programParameters';


class CurrentProgram extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      exampleData: [
        [0xf0, 0x42, 0x30, 0x00, 0x01, 0x18, 0x40, 0x00, 0x53, 0x74, 0x61, 0x62, 0x20, 0x4b, 0x69, 0x00, 0x6e, 0x67, 0x20, 0x20, 0x20, 0x00, 0x00, 0x40, 0x00, 0x3c, 0x02, 0x01, 0x04, 0x40, 0x74, 0x01, 0x7d, 0x01, 0x0d, 0x02, 0x00, 0x28, 0x0c, 0x00, 0x09, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x04, 0x00, 0x7f, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x02, 0x4f, 0x00, 0x00, 0x0d, 0x00, 0x10, 0x00, 0x00, 0x07, 0x0f, 0x52, 0x00, 0x07, 0x00, 0x10, 0x18, 0x00, 0x02, 0x0f, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x00, 0x00, 0x03, 0x1d, 0x00, 0x00, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0a, 0x40, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x28, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x7f, 0x7f, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x46, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x02, 0x00, 0x0f, 0x00, 0x00, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x03, 0x1d, 0x00, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x00, 0x05, 0x01, 0x3c, 0x01, 0x00, 0x00, 0x00, 0x40, 0x01, 0x01, 0x3d, 0x33, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x64, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x14, 0x02, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x64, 0x5d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x02, 0x4f, 0x00, 0x08, 0x01, 0x01, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7],
        [0xf0, 0x42, 0x30, 0x00, 0x01, 0x18, 0x40, 0x00, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x00, 0x20, 0x4c, 0x65, 0x61, 0x64, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x0a, 0x40, 0x00, 0x01, 0x7d, 0x00, 0x0f, 0x02, 0x01, 0x09, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x02, 0x00, 0x6b, 0x13, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x7f, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x49, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x02, 0x46, 0x00, 0x00, 0x0d, 0x00, 0x10, 0x00, 0x00, 0x07, 0x0f, 0x61, 0x00, 0x07, 0x00, 0x10, 0x0a, 0x00, 0x05, 0x0f, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x00, 0x00, 0x03, 0x1d, 0x00, 0x00, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0a, 0x40, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x28, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x7f, 0x7f, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x46, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x02, 0x00, 0x0f, 0x00, 0x00, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x03, 0x1d, 0x00, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x03, 0x01, 0x2f, 0x40, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x64, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x14, 0x02, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x64, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x32, 0x00, 0x08, 0x01, 0x01, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7],
        [0xf0, 0x42, 0x30, 0x00, 0x01, 0x18, 0x40, 0x00, 0x44, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x00, 0x4c, 0x65, 0x61, 0x64, 0x20, 0x01, 0x01, 0x40, 0x00, 0x3c, 0x00, 0x00, 0x0a, 0x40, 0x74, 0x00, 0x00, 0x00, 0x0f, 0x0c, 0x01, 0x14, 0x05, 0x04, 0x19, 0x00, 0x7f, 0x25, 0x30, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x7f, 0x0a, 0x00, 0x47, 0x55, 0x00, 0x15, 0x15, 0x1d, 0x00, 0x08, 0x3c, 0x40, 0x00, 0x76, 0x00, 0x0d, 0x61, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x02, 0x46, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0x02, 0x0f, 0x6a, 0x00, 0x07, 0x1b, 0x18, 0x00, 0x00, 0x07, 0x10, 0x08, 0x00, 0x07, 0x28, 0x10, 0x00, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0a, 0x40, 0x74, 0x00, 0x00, 0x0f, 0x0c, 0x00, 0x01, 0x14, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x7f, 0x7f, 0x05, 0x7f, 0x27, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x50, 0x40, 0x00, 0x76, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x46, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x02, 0x00, 0x0f, 0x00, 0x00, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x03, 0x1d, 0x00, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x00, 0x03, 0x01, 0x28, 0x01, 0x00, 0x40, 0x00, 0x40, 0x05, 0x03, 0x0e, 0x24, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x64, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x14, 0x02, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x04, 0x00, 0x64, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x50, 0x00, 0x08, 0x01, 0x01, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7]
      ]
    }
    this.midiLog = [];
  }

  componentDidMount()    {
    this.props.dispatch(loadCurrentProgram(this.state.exampleData[0]));
  }

  Uint8ArrToArray(Uint8Arr) {
    let data = [];
    for (let i = 0; i < Uint8Arr.length; i++) {
      data.push(Uint8Arr[i]);
    }
    return data;
  }

  handleMidiMessage(evt) {
    if (evt.data[0] !== 0xF8) {
      console.log("MIDI IN!", evt.data);
    }
  }

  handleKbdMessage(evt) {
    if (evt.data[0] === 0xF8) { // internal clock
      return;
    }

    console.log("KBD IN!", evt.data);
    let data = this.Uint8ArrToArray(evt.data);

    this.midiLog.push(data);

    // only store last 3 messages
    if (this.midiLog.length > 3) this.midiLog.splice(0, 1);

    if (data[0] == 0xF0
      && data[1] == 0x42 // KORG ID
      && data[2] == 0x30 // channel 1
      && data[3] == 0x00 // KK ID 1
      && data[4] == 0x01 // KK ID 2
      && data[5] == 0x18 // KK ID 3
      && data[6] == 0x40 // function
    ) {
      // covert and log hex data
      let hexData = data.map((value) => {
        return "0x" + (value < 16 ? "0" : "") + value.toString(16);
      });
      console.log("PROGRAM DUMP", hexData.join(", "));

      // trigger action
      this.props.dispatch(loadCurrentProgram(this.state.exampleData[0]));
    }
  }


  getTimbreProps(id, data) {
    let parameter = programParameters.getParameter(id);

    return {
      name: parameter.name,
      parameters: parameter.parameters,
      parameter: parameter,
      data: data,
      onChange: this.handleChange.bind(this)
    };
  }

  handleChange(offset, value) {
    this.props.dispatch(updateCurrentProgramParam(offset, value));
  }

  render() {

    const { dispatch, currentProgram } = this.props;
    const { name, data } = currentProgram;

    let handleProgramChange = (index) => () => dispatch(loadCurrentProgram(this.state.exampleData[index]));

    return (
      <div>

        <h2>{name}</h2>

        <button onClick={handleProgramChange(0)}>Stab King</button>
        <button onClick={handleProgramChange(1)}>Classic Lead</button>
        <button onClick={handleProgramChange(2)}>DistModLead</button>

        <br />
        <br />

        <Timbre {...this.getTimbreProps("timbre_a", data) } />

        <br />
        <br />

        <Timbre {...this.getTimbreProps("timbre_b", data)} />

        <KingKORG
          onMidiMessage={this.handleMidiMessage.bind(this)}
          onKbdMessage={this.handleKbdMessage.bind(this)}
        />
      </div>
    );


  }

}


function selectPropsFromStore(state) {
  return {
    currentProgram: state.currentProgram
  }
}

// Wrap the component to inject dispatch and state into it
export default connect(selectPropsFromStore)(CurrentProgram);
